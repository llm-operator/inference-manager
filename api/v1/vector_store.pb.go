// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: api/v1/vector_store.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExpiresAfter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Anchor timestamp after which the expiration policy applies. Supported anchors: last_active_at.
	Anchor string `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
	// The number of days after the anchor time that the vector store will expire.
	Days int64 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *ExpiresAfter) Reset() {
	*x = ExpiresAfter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpiresAfter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpiresAfter) ProtoMessage() {}

func (x *ExpiresAfter) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpiresAfter.ProtoReflect.Descriptor instead.
func (*ExpiresAfter) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{0}
}

func (x *ExpiresAfter) GetAnchor() string {
	if x != nil {
		return x.Anchor
	}
	return ""
}

func (x *ExpiresAfter) GetDays() int64 {
	if x != nil {
		return x.Days
	}
	return 0
}

type VectorStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	// The Unix timestamp (in seconds) for when the vector store was created.
	CreatedAt int64  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The total number of bytes used by the files in the vector store.
	UsageBytes int64 `protobuf:"varint,5,opt,name=usage_bytes,json=usageBytes,proto3" json:"usage_bytes,omitempty"`
	FileCounts int64 `protobuf:"varint,6,opt,name=file_counts,json=fileCounts,proto3" json:"file_counts,omitempty"`
	// The status of the vector store, which can be either expired, in_progress, or completed.
	// A status of completed indicates that the vector store is ready for use.
	Status       string        `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ExpiresAfter *ExpiresAfter `protobuf:"bytes,8,opt,name=expires_after,json=expiresAfter,proto3" json:"expires_after,omitempty"`
	// integer or null. The Unix timestamp (in seconds) for when the vector store will expire.
	ExpiresAt int64 `protobuf:"varint,9,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// integer or null. The Unix timestamp (in seconds) for when the vector store was last active.
	LastActiveAt int64             `protobuf:"varint,10,opt,name=last_active_at,json=lastActiveAt,proto3" json:"last_active_at,omitempty"`
	Metadata     map[string]string `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VectorStore) Reset() {
	*x = VectorStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorStore) ProtoMessage() {}

func (x *VectorStore) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorStore.ProtoReflect.Descriptor instead.
func (*VectorStore) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{1}
}

func (x *VectorStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VectorStore) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *VectorStore) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *VectorStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VectorStore) GetUsageBytes() int64 {
	if x != nil {
		return x.UsageBytes
	}
	return 0
}

func (x *VectorStore) GetFileCounts() int64 {
	if x != nil {
		return x.FileCounts
	}
	return 0
}

func (x *VectorStore) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VectorStore) GetExpiresAfter() *ExpiresAfter {
	if x != nil {
		return x.ExpiresAfter
	}
	return nil
}

func (x *VectorStore) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *VectorStore) GetLastActiveAt() int64 {
	if x != nil {
		return x.LastActiveAt
	}
	return 0
}

func (x *VectorStore) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type AutoChunkingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AutoChunkingStrategy) Reset() {
	*x = AutoChunkingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoChunkingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoChunkingStrategy) ProtoMessage() {}

func (x *AutoChunkingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoChunkingStrategy.ProtoReflect.Descriptor instead.
func (*AutoChunkingStrategy) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{2}
}

func (x *AutoChunkingStrategy) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type StaticChunkingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string                         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Statis *StaticChunkingStrategy_Static `protobuf:"bytes,2,opt,name=statis,proto3" json:"statis,omitempty"`
}

func (x *StaticChunkingStrategy) Reset() {
	*x = StaticChunkingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticChunkingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticChunkingStrategy) ProtoMessage() {}

func (x *StaticChunkingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticChunkingStrategy.ProtoReflect.Descriptor instead.
func (*StaticChunkingStrategy) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{3}
}

func (x *StaticChunkingStrategy) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StaticChunkingStrategy) GetStatis() *StaticChunkingStrategy_Static {
	if x != nil {
		return x.Statis
	}
	return nil
}

type OtherChunkingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *OtherChunkingStrategy) Reset() {
	*x = OtherChunkingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherChunkingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherChunkingStrategy) ProtoMessage() {}

func (x *OtherChunkingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherChunkingStrategy.ProtoReflect.Descriptor instead.
func (*OtherChunkingStrategy) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{4}
}

func (x *OtherChunkingStrategy) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CreateVectorStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIds      []string      `protobuf:"bytes,1,rep,name=file_ids,json=fileIds,proto3" json:"file_ids,omitempty"`
	Name         string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ExpiresAfter *ExpiresAfter `protobuf:"bytes,3,opt,name=expires_after,json=expiresAfter,proto3" json:"expires_after,omitempty"`
	// Types that are assignable to ChunkingStrategy:
	//	*CreateVectorStoreRequest_AutoChunkingStrategy
	//	*CreateVectorStoreRequest_StaticChunkingStrategy
	ChunkingStrategy isCreateVectorStoreRequest_ChunkingStrategy `protobuf_oneof:"chunking_strategy"`
	Metadata         map[string]string                           `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateVectorStoreRequest) Reset() {
	*x = CreateVectorStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVectorStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVectorStoreRequest) ProtoMessage() {}

func (x *CreateVectorStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVectorStoreRequest.ProtoReflect.Descriptor instead.
func (*CreateVectorStoreRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{5}
}

func (x *CreateVectorStoreRequest) GetFileIds() []string {
	if x != nil {
		return x.FileIds
	}
	return nil
}

func (x *CreateVectorStoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVectorStoreRequest) GetExpiresAfter() *ExpiresAfter {
	if x != nil {
		return x.ExpiresAfter
	}
	return nil
}

func (m *CreateVectorStoreRequest) GetChunkingStrategy() isCreateVectorStoreRequest_ChunkingStrategy {
	if m != nil {
		return m.ChunkingStrategy
	}
	return nil
}

func (x *CreateVectorStoreRequest) GetAutoChunkingStrategy() *AutoChunkingStrategy {
	if x, ok := x.GetChunkingStrategy().(*CreateVectorStoreRequest_AutoChunkingStrategy); ok {
		return x.AutoChunkingStrategy
	}
	return nil
}

func (x *CreateVectorStoreRequest) GetStaticChunkingStrategy() *StaticChunkingStrategy {
	if x, ok := x.GetChunkingStrategy().(*CreateVectorStoreRequest_StaticChunkingStrategy); ok {
		return x.StaticChunkingStrategy
	}
	return nil
}

func (x *CreateVectorStoreRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isCreateVectorStoreRequest_ChunkingStrategy interface {
	isCreateVectorStoreRequest_ChunkingStrategy()
}

type CreateVectorStoreRequest_AutoChunkingStrategy struct {
	AutoChunkingStrategy *AutoChunkingStrategy `protobuf:"bytes,4,opt,name=auto_chunking_strategy,json=autoChunkingStrategy,proto3,oneof"`
}

type CreateVectorStoreRequest_StaticChunkingStrategy struct {
	StaticChunkingStrategy *StaticChunkingStrategy `protobuf:"bytes,5,opt,name=static_chunking_strategy,json=staticChunkingStrategy,proto3,oneof"`
}

func (*CreateVectorStoreRequest_AutoChunkingStrategy) isCreateVectorStoreRequest_ChunkingStrategy() {}

func (*CreateVectorStoreRequest_StaticChunkingStrategy) isCreateVectorStoreRequest_ChunkingStrategy() {
}

type ListVectorStoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Order   string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	After   string `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`
	Berfore string `protobuf:"bytes,4,opt,name=berfore,proto3" json:"berfore,omitempty"`
}

func (x *ListVectorStoresRequest) Reset() {
	*x = ListVectorStoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVectorStoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVectorStoresRequest) ProtoMessage() {}

func (x *ListVectorStoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVectorStoresRequest.ProtoReflect.Descriptor instead.
func (*ListVectorStoresRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{6}
}

func (x *ListVectorStoresRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListVectorStoresRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *ListVectorStoresRequest) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *ListVectorStoresRequest) GetBerfore() string {
	if x != nil {
		return x.Berfore
	}
	return ""
}

type ListVectorStoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object  string         `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Data    []*VectorStore `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	FirstId string         `protobuf:"bytes,3,opt,name=first_id,json=firstId,proto3" json:"first_id,omitempty"`
	LastId  string         `protobuf:"bytes,4,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	HasMore bool           `protobuf:"varint,5,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *ListVectorStoresResponse) Reset() {
	*x = ListVectorStoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVectorStoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVectorStoresResponse) ProtoMessage() {}

func (x *ListVectorStoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVectorStoresResponse.ProtoReflect.Descriptor instead.
func (*ListVectorStoresResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{7}
}

func (x *ListVectorStoresResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ListVectorStoresResponse) GetData() []*VectorStore {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListVectorStoresResponse) GetFirstId() string {
	if x != nil {
		return x.FirstId
	}
	return ""
}

func (x *ListVectorStoresResponse) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

func (x *ListVectorStoresResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type GetVectorStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VectoreStoreId string `protobuf:"bytes,1,opt,name=vectore_store_id,json=vectoreStoreId,proto3" json:"vectore_store_id,omitempty"`
}

func (x *GetVectorStoreRequest) Reset() {
	*x = GetVectorStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVectorStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVectorStoreRequest) ProtoMessage() {}

func (x *GetVectorStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVectorStoreRequest.ProtoReflect.Descriptor instead.
func (*GetVectorStoreRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{8}
}

func (x *GetVectorStoreRequest) GetVectoreStoreId() string {
	if x != nil {
		return x.VectoreStoreId
	}
	return ""
}

type UpdateVectorStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VectoreStoreId string `protobuf:"bytes,1,opt,name=vectore_store_id,json=vectoreStoreId,proto3" json:"vectore_store_id,omitempty"`
	// string or null.
	Name         string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ExpiresAfter *ExpiresAfter     `protobuf:"bytes,3,opt,name=expires_after,json=expiresAfter,proto3" json:"expires_after,omitempty"`
	Metadata     map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateVectorStoreRequest) Reset() {
	*x = UpdateVectorStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVectorStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVectorStoreRequest) ProtoMessage() {}

func (x *UpdateVectorStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVectorStoreRequest.ProtoReflect.Descriptor instead.
func (*UpdateVectorStoreRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateVectorStoreRequest) GetVectoreStoreId() string {
	if x != nil {
		return x.VectoreStoreId
	}
	return ""
}

func (x *UpdateVectorStoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateVectorStoreRequest) GetExpiresAfter() *ExpiresAfter {
	if x != nil {
		return x.ExpiresAfter
	}
	return nil
}

func (x *UpdateVectorStoreRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DeleteVectorStoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VectoreStoreId string `protobuf:"bytes,1,opt,name=vectore_store_id,json=vectoreStoreId,proto3" json:"vectore_store_id,omitempty"`
}

func (x *DeleteVectorStoreRequest) Reset() {
	*x = DeleteVectorStoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVectorStoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVectorStoreRequest) ProtoMessage() {}

func (x *DeleteVectorStoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVectorStoreRequest.ProtoReflect.Descriptor instead.
func (*DeleteVectorStoreRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteVectorStoreRequest) GetVectoreStoreId() string {
	if x != nil {
		return x.VectoreStoreId
	}
	return ""
}

type DeleteVectorStoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object  string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Deleted bool   `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *DeleteVectorStoreResponse) Reset() {
	*x = DeleteVectorStoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVectorStoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVectorStoreResponse) ProtoMessage() {}

func (x *DeleteVectorStoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVectorStoreResponse.ProtoReflect.Descriptor instead.
func (*DeleteVectorStoreResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteVectorStoreResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteVectorStoreResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *DeleteVectorStoreResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type VectorStoreFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	// The total vector store usage in bytes. Note that this may be different from the original file size.
	UsageBytes int64 `protobuf:"varint,3,opt,name=usage_bytes,json=usageBytes,proto3" json:"usage_bytes,omitempty"`
	// The Unix timestamp (in seconds) for when the vector store file was created.
	CreatedAt     int64  `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	VectorStoreId string `protobuf:"bytes,5,opt,name=vector_store_id,json=vectorStoreId,proto3" json:"vector_store_id,omitempty"`
	// The status of the vector store file, which can be either in_progress, completed, cancelled, or failed.
	// The status completed indicates that the vector store file is ready for use.
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// Error or null.
	LastError *VectorStoreFile_Error `protobuf:"bytes,7,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`
	// Types that are assignable to ChunkingStrategy:
	//	*VectorStoreFile_StaticChunkingStrategy
	//	*VectorStoreFile_OtherChunkingStrategy
	ChunkingStrategy isVectorStoreFile_ChunkingStrategy `protobuf_oneof:"chunking_strategy"`
}

func (x *VectorStoreFile) Reset() {
	*x = VectorStoreFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorStoreFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorStoreFile) ProtoMessage() {}

func (x *VectorStoreFile) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorStoreFile.ProtoReflect.Descriptor instead.
func (*VectorStoreFile) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{12}
}

func (x *VectorStoreFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VectorStoreFile) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *VectorStoreFile) GetUsageBytes() int64 {
	if x != nil {
		return x.UsageBytes
	}
	return 0
}

func (x *VectorStoreFile) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *VectorStoreFile) GetVectorStoreId() string {
	if x != nil {
		return x.VectorStoreId
	}
	return ""
}

func (x *VectorStoreFile) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *VectorStoreFile) GetLastError() *VectorStoreFile_Error {
	if x != nil {
		return x.LastError
	}
	return nil
}

func (m *VectorStoreFile) GetChunkingStrategy() isVectorStoreFile_ChunkingStrategy {
	if m != nil {
		return m.ChunkingStrategy
	}
	return nil
}

func (x *VectorStoreFile) GetStaticChunkingStrategy() *StaticChunkingStrategy {
	if x, ok := x.GetChunkingStrategy().(*VectorStoreFile_StaticChunkingStrategy); ok {
		return x.StaticChunkingStrategy
	}
	return nil
}

func (x *VectorStoreFile) GetOtherChunkingStrategy() *OtherChunkingStrategy {
	if x, ok := x.GetChunkingStrategy().(*VectorStoreFile_OtherChunkingStrategy); ok {
		return x.OtherChunkingStrategy
	}
	return nil
}

type isVectorStoreFile_ChunkingStrategy interface {
	isVectorStoreFile_ChunkingStrategy()
}

type VectorStoreFile_StaticChunkingStrategy struct {
	StaticChunkingStrategy *StaticChunkingStrategy `protobuf:"bytes,8,opt,name=static_chunking_strategy,json=staticChunkingStrategy,proto3,oneof"`
}

type VectorStoreFile_OtherChunkingStrategy struct {
	OtherChunkingStrategy *OtherChunkingStrategy `protobuf:"bytes,9,opt,name=other_chunking_strategy,json=otherChunkingStrategy,proto3,oneof"`
}

func (*VectorStoreFile_StaticChunkingStrategy) isVectorStoreFile_ChunkingStrategy() {}

func (*VectorStoreFile_OtherChunkingStrategy) isVectorStoreFile_ChunkingStrategy() {}

type CreateVectorStoreFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VectoreStoreId string `protobuf:"bytes,1,opt,name=vectore_store_id,json=vectoreStoreId,proto3" json:"vectore_store_id,omitempty"`
	FileId         string `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// Types that are assignable to ChunkingStrategy:
	//	*CreateVectorStoreFileRequest_AutoChunkingStrategy
	//	*CreateVectorStoreFileRequest_StaticChunkingStrategy
	ChunkingStrategy isCreateVectorStoreFileRequest_ChunkingStrategy `protobuf_oneof:"chunking_strategy"`
}

func (x *CreateVectorStoreFileRequest) Reset() {
	*x = CreateVectorStoreFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVectorStoreFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVectorStoreFileRequest) ProtoMessage() {}

func (x *CreateVectorStoreFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVectorStoreFileRequest.ProtoReflect.Descriptor instead.
func (*CreateVectorStoreFileRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{13}
}

func (x *CreateVectorStoreFileRequest) GetVectoreStoreId() string {
	if x != nil {
		return x.VectoreStoreId
	}
	return ""
}

func (x *CreateVectorStoreFileRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (m *CreateVectorStoreFileRequest) GetChunkingStrategy() isCreateVectorStoreFileRequest_ChunkingStrategy {
	if m != nil {
		return m.ChunkingStrategy
	}
	return nil
}

func (x *CreateVectorStoreFileRequest) GetAutoChunkingStrategy() *AutoChunkingStrategy {
	if x, ok := x.GetChunkingStrategy().(*CreateVectorStoreFileRequest_AutoChunkingStrategy); ok {
		return x.AutoChunkingStrategy
	}
	return nil
}

func (x *CreateVectorStoreFileRequest) GetStaticChunkingStrategy() *StaticChunkingStrategy {
	if x, ok := x.GetChunkingStrategy().(*CreateVectorStoreFileRequest_StaticChunkingStrategy); ok {
		return x.StaticChunkingStrategy
	}
	return nil
}

type isCreateVectorStoreFileRequest_ChunkingStrategy interface {
	isCreateVectorStoreFileRequest_ChunkingStrategy()
}

type CreateVectorStoreFileRequest_AutoChunkingStrategy struct {
	AutoChunkingStrategy *AutoChunkingStrategy `protobuf:"bytes,3,opt,name=auto_chunking_strategy,json=autoChunkingStrategy,proto3,oneof"`
}

type CreateVectorStoreFileRequest_StaticChunkingStrategy struct {
	StaticChunkingStrategy *StaticChunkingStrategy `protobuf:"bytes,4,opt,name=static_chunking_strategy,json=staticChunkingStrategy,proto3,oneof"`
}

func (*CreateVectorStoreFileRequest_AutoChunkingStrategy) isCreateVectorStoreFileRequest_ChunkingStrategy() {
}

func (*CreateVectorStoreFileRequest_StaticChunkingStrategy) isCreateVectorStoreFileRequest_ChunkingStrategy() {
}

type ListVectorStoreFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VectoreStoreId string `protobuf:"bytes,1,opt,name=vectore_store_id,json=vectoreStoreId,proto3" json:"vectore_store_id,omitempty"`
	Limit          int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Order          string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	After          string `protobuf:"bytes,4,opt,name=after,proto3" json:"after,omitempty"`
	Berfore        string `protobuf:"bytes,5,opt,name=berfore,proto3" json:"berfore,omitempty"`
	// Filter by file status. One of in_progress, completed, failed, cancelled.
	Filter string `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListVectorStoreFilesRequest) Reset() {
	*x = ListVectorStoreFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVectorStoreFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVectorStoreFilesRequest) ProtoMessage() {}

func (x *ListVectorStoreFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVectorStoreFilesRequest.ProtoReflect.Descriptor instead.
func (*ListVectorStoreFilesRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{14}
}

func (x *ListVectorStoreFilesRequest) GetVectoreStoreId() string {
	if x != nil {
		return x.VectoreStoreId
	}
	return ""
}

func (x *ListVectorStoreFilesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListVectorStoreFilesRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *ListVectorStoreFilesRequest) GetAfter() string {
	if x != nil {
		return x.After
	}
	return ""
}

func (x *ListVectorStoreFilesRequest) GetBerfore() string {
	if x != nil {
		return x.Berfore
	}
	return ""
}

func (x *ListVectorStoreFilesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListVectorStoreFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object  string             `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Data    []*VectorStoreFile `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	FirstId string             `protobuf:"bytes,3,opt,name=first_id,json=firstId,proto3" json:"first_id,omitempty"`
	LastId  string             `protobuf:"bytes,4,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	HasMore bool               `protobuf:"varint,5,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *ListVectorStoreFilesResponse) Reset() {
	*x = ListVectorStoreFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVectorStoreFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVectorStoreFilesResponse) ProtoMessage() {}

func (x *ListVectorStoreFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVectorStoreFilesResponse.ProtoReflect.Descriptor instead.
func (*ListVectorStoreFilesResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{15}
}

func (x *ListVectorStoreFilesResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ListVectorStoreFilesResponse) GetData() []*VectorStoreFile {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListVectorStoreFilesResponse) GetFirstId() string {
	if x != nil {
		return x.FirstId
	}
	return ""
}

func (x *ListVectorStoreFilesResponse) GetLastId() string {
	if x != nil {
		return x.LastId
	}
	return ""
}

func (x *ListVectorStoreFilesResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type GetVectorStoreFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VectoreStoreId string `protobuf:"bytes,1,opt,name=vectore_store_id,json=vectoreStoreId,proto3" json:"vectore_store_id,omitempty"`
	FileId         string `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *GetVectorStoreFileRequest) Reset() {
	*x = GetVectorStoreFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVectorStoreFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVectorStoreFileRequest) ProtoMessage() {}

func (x *GetVectorStoreFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVectorStoreFileRequest.ProtoReflect.Descriptor instead.
func (*GetVectorStoreFileRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{16}
}

func (x *GetVectorStoreFileRequest) GetVectoreStoreId() string {
	if x != nil {
		return x.VectoreStoreId
	}
	return ""
}

func (x *GetVectorStoreFileRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type DeleteVectorStoreFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VectoreStoreId string `protobuf:"bytes,1,opt,name=vectore_store_id,json=vectoreStoreId,proto3" json:"vectore_store_id,omitempty"`
	FileId         string `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *DeleteVectorStoreFileRequest) Reset() {
	*x = DeleteVectorStoreFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVectorStoreFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVectorStoreFileRequest) ProtoMessage() {}

func (x *DeleteVectorStoreFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVectorStoreFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteVectorStoreFileRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteVectorStoreFileRequest) GetVectoreStoreId() string {
	if x != nil {
		return x.VectoreStoreId
	}
	return ""
}

func (x *DeleteVectorStoreFileRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type DeleteVectorStoreFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Object  string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Deleted bool   `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *DeleteVectorStoreFileResponse) Reset() {
	*x = DeleteVectorStoreFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVectorStoreFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVectorStoreFileResponse) ProtoMessage() {}

func (x *DeleteVectorStoreFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVectorStoreFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteVectorStoreFileResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteVectorStoreFileResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteVectorStoreFileResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *DeleteVectorStoreFileResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type StaticChunkingStrategy_Static struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxChunkSizeTokens int64 `protobuf:"varint,1,opt,name=max_chunk_size_tokens,json=maxChunkSizeTokens,proto3" json:"max_chunk_size_tokens,omitempty"`
	ChunkOverlapTokens int64 `protobuf:"varint,2,opt,name=chunk_overlap_tokens,json=chunkOverlapTokens,proto3" json:"chunk_overlap_tokens,omitempty"`
}

func (x *StaticChunkingStrategy_Static) Reset() {
	*x = StaticChunkingStrategy_Static{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticChunkingStrategy_Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticChunkingStrategy_Static) ProtoMessage() {}

func (x *StaticChunkingStrategy_Static) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticChunkingStrategy_Static.ProtoReflect.Descriptor instead.
func (*StaticChunkingStrategy_Static) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{3, 0}
}

func (x *StaticChunkingStrategy_Static) GetMaxChunkSizeTokens() int64 {
	if x != nil {
		return x.MaxChunkSizeTokens
	}
	return 0
}

func (x *StaticChunkingStrategy_Static) GetChunkOverlapTokens() int64 {
	if x != nil {
		return x.ChunkOverlapTokens
	}
	return 0
}

type VectorStoreFile_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of server_error or rate_limit_exceeded.
	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *VectorStoreFile_Error) Reset() {
	*x = VectorStoreFile_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_vector_store_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorStoreFile_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorStoreFile_Error) ProtoMessage() {}

func (x *VectorStoreFile_Error) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_vector_store_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorStoreFile_Error.ProtoReflect.Descriptor instead.
func (*VectorStoreFile_Error) Descriptor() ([]byte, []int) {
	return file_api_v1_vector_store_proto_rawDescGZIP(), []int{12, 0}
}

func (x *VectorStoreFile_Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VectorStoreFile_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_api_v1_vector_store_proto protoreflect.FileDescriptor

var file_api_v1_vector_store_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x6c, 0x6c, 0x6d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x22, 0xea, 0x03, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x12, 0x53,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x2a, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf0, 0x01, 0x0a,
	0x16, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6c, 0x6c,
	0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x1a, 0x6d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22,
	0x2b, 0x0a, 0x15, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xac, 0x04, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x16, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52,
	0x14, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x70, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x75, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0xc8, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x6c, 0x6d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xba, 0x04, 0x0a, 0x0f, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x70, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x6c, 0x6d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x6d, 0x0a, 0x17, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x6c,
	0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x48, 0x00, 0x52, 0x15, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x35, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xd4, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x16, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52,
	0x14, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x70, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xbb, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0x5e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x32, 0xdb, 0x0c, 0x0a, 0x12,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x35, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x2e,
	0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x2d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa5, 0x01, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x36, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x6c, 0x6d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x73, 0x2f, 0x7b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb3, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x2e, 0x6c, 0x6c, 0x6d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb7, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x3a, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22,
	0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x2e,
	0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73,
	0x2f, 0x7b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x37, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x12, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xcf, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x3a, 0x2e, 0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x6c, 0x6c, 0x6d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x37, 0x2a, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x7b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f,
	0x7b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6c, 0x6d, 0x2d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_vector_store_proto_rawDescOnce sync.Once
	file_api_v1_vector_store_proto_rawDescData = file_api_v1_vector_store_proto_rawDesc
)

func file_api_v1_vector_store_proto_rawDescGZIP() []byte {
	file_api_v1_vector_store_proto_rawDescOnce.Do(func() {
		file_api_v1_vector_store_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_vector_store_proto_rawDescData)
	})
	return file_api_v1_vector_store_proto_rawDescData
}

var file_api_v1_vector_store_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_api_v1_vector_store_proto_goTypes = []interface{}{
	(*ExpiresAfter)(nil),                  // 0: llmoperator.vectore_store.v1.ExpiresAfter
	(*VectorStore)(nil),                   // 1: llmoperator.vectore_store.v1.VectorStore
	(*AutoChunkingStrategy)(nil),          // 2: llmoperator.vectore_store.v1.AutoChunkingStrategy
	(*StaticChunkingStrategy)(nil),        // 3: llmoperator.vectore_store.v1.StaticChunkingStrategy
	(*OtherChunkingStrategy)(nil),         // 4: llmoperator.vectore_store.v1.OtherChunkingStrategy
	(*CreateVectorStoreRequest)(nil),      // 5: llmoperator.vectore_store.v1.CreateVectorStoreRequest
	(*ListVectorStoresRequest)(nil),       // 6: llmoperator.vectore_store.v1.ListVectorStoresRequest
	(*ListVectorStoresResponse)(nil),      // 7: llmoperator.vectore_store.v1.ListVectorStoresResponse
	(*GetVectorStoreRequest)(nil),         // 8: llmoperator.vectore_store.v1.GetVectorStoreRequest
	(*UpdateVectorStoreRequest)(nil),      // 9: llmoperator.vectore_store.v1.UpdateVectorStoreRequest
	(*DeleteVectorStoreRequest)(nil),      // 10: llmoperator.vectore_store.v1.DeleteVectorStoreRequest
	(*DeleteVectorStoreResponse)(nil),     // 11: llmoperator.vectore_store.v1.DeleteVectorStoreResponse
	(*VectorStoreFile)(nil),               // 12: llmoperator.vectore_store.v1.VectorStoreFile
	(*CreateVectorStoreFileRequest)(nil),  // 13: llmoperator.vectore_store.v1.CreateVectorStoreFileRequest
	(*ListVectorStoreFilesRequest)(nil),   // 14: llmoperator.vectore_store.v1.ListVectorStoreFilesRequest
	(*ListVectorStoreFilesResponse)(nil),  // 15: llmoperator.vectore_store.v1.ListVectorStoreFilesResponse
	(*GetVectorStoreFileRequest)(nil),     // 16: llmoperator.vectore_store.v1.GetVectorStoreFileRequest
	(*DeleteVectorStoreFileRequest)(nil),  // 17: llmoperator.vectore_store.v1.DeleteVectorStoreFileRequest
	(*DeleteVectorStoreFileResponse)(nil), // 18: llmoperator.vectore_store.v1.DeleteVectorStoreFileResponse
	nil,                                   // 19: llmoperator.vectore_store.v1.VectorStore.MetadataEntry
	(*StaticChunkingStrategy_Static)(nil), // 20: llmoperator.vectore_store.v1.StaticChunkingStrategy.Static
	nil,                                   // 21: llmoperator.vectore_store.v1.CreateVectorStoreRequest.MetadataEntry
	nil,                                   // 22: llmoperator.vectore_store.v1.UpdateVectorStoreRequest.MetadataEntry
	(*VectorStoreFile_Error)(nil),         // 23: llmoperator.vectore_store.v1.VectorStoreFile.Error
}
var file_api_v1_vector_store_proto_depIdxs = []int32{
	0,  // 0: llmoperator.vectore_store.v1.VectorStore.expires_after:type_name -> llmoperator.vectore_store.v1.ExpiresAfter
	19, // 1: llmoperator.vectore_store.v1.VectorStore.metadata:type_name -> llmoperator.vectore_store.v1.VectorStore.MetadataEntry
	20, // 2: llmoperator.vectore_store.v1.StaticChunkingStrategy.statis:type_name -> llmoperator.vectore_store.v1.StaticChunkingStrategy.Static
	0,  // 3: llmoperator.vectore_store.v1.CreateVectorStoreRequest.expires_after:type_name -> llmoperator.vectore_store.v1.ExpiresAfter
	2,  // 4: llmoperator.vectore_store.v1.CreateVectorStoreRequest.auto_chunking_strategy:type_name -> llmoperator.vectore_store.v1.AutoChunkingStrategy
	3,  // 5: llmoperator.vectore_store.v1.CreateVectorStoreRequest.static_chunking_strategy:type_name -> llmoperator.vectore_store.v1.StaticChunkingStrategy
	21, // 6: llmoperator.vectore_store.v1.CreateVectorStoreRequest.metadata:type_name -> llmoperator.vectore_store.v1.CreateVectorStoreRequest.MetadataEntry
	1,  // 7: llmoperator.vectore_store.v1.ListVectorStoresResponse.data:type_name -> llmoperator.vectore_store.v1.VectorStore
	0,  // 8: llmoperator.vectore_store.v1.UpdateVectorStoreRequest.expires_after:type_name -> llmoperator.vectore_store.v1.ExpiresAfter
	22, // 9: llmoperator.vectore_store.v1.UpdateVectorStoreRequest.metadata:type_name -> llmoperator.vectore_store.v1.UpdateVectorStoreRequest.MetadataEntry
	23, // 10: llmoperator.vectore_store.v1.VectorStoreFile.last_error:type_name -> llmoperator.vectore_store.v1.VectorStoreFile.Error
	3,  // 11: llmoperator.vectore_store.v1.VectorStoreFile.static_chunking_strategy:type_name -> llmoperator.vectore_store.v1.StaticChunkingStrategy
	4,  // 12: llmoperator.vectore_store.v1.VectorStoreFile.other_chunking_strategy:type_name -> llmoperator.vectore_store.v1.OtherChunkingStrategy
	2,  // 13: llmoperator.vectore_store.v1.CreateVectorStoreFileRequest.auto_chunking_strategy:type_name -> llmoperator.vectore_store.v1.AutoChunkingStrategy
	3,  // 14: llmoperator.vectore_store.v1.CreateVectorStoreFileRequest.static_chunking_strategy:type_name -> llmoperator.vectore_store.v1.StaticChunkingStrategy
	12, // 15: llmoperator.vectore_store.v1.ListVectorStoreFilesResponse.data:type_name -> llmoperator.vectore_store.v1.VectorStoreFile
	5,  // 16: llmoperator.vectore_store.v1.VectorStoreService.CreateVectorStore:input_type -> llmoperator.vectore_store.v1.CreateVectorStoreRequest
	6,  // 17: llmoperator.vectore_store.v1.VectorStoreService.ListVectorStores:input_type -> llmoperator.vectore_store.v1.ListVectorStoresRequest
	8,  // 18: llmoperator.vectore_store.v1.VectorStoreService.GetVectorStore:input_type -> llmoperator.vectore_store.v1.GetVectorStoreRequest
	9,  // 19: llmoperator.vectore_store.v1.VectorStoreService.UpdateVectorStore:input_type -> llmoperator.vectore_store.v1.UpdateVectorStoreRequest
	10, // 20: llmoperator.vectore_store.v1.VectorStoreService.DeleteVectorStore:input_type -> llmoperator.vectore_store.v1.DeleteVectorStoreRequest
	13, // 21: llmoperator.vectore_store.v1.VectorStoreService.CreateVectorStoreFile:input_type -> llmoperator.vectore_store.v1.CreateVectorStoreFileRequest
	14, // 22: llmoperator.vectore_store.v1.VectorStoreService.ListVectorStoreFiles:input_type -> llmoperator.vectore_store.v1.ListVectorStoreFilesRequest
	16, // 23: llmoperator.vectore_store.v1.VectorStoreService.GetVectorStoreFile:input_type -> llmoperator.vectore_store.v1.GetVectorStoreFileRequest
	17, // 24: llmoperator.vectore_store.v1.VectorStoreService.DeleteVectorStoreFile:input_type -> llmoperator.vectore_store.v1.DeleteVectorStoreFileRequest
	1,  // 25: llmoperator.vectore_store.v1.VectorStoreService.CreateVectorStore:output_type -> llmoperator.vectore_store.v1.VectorStore
	7,  // 26: llmoperator.vectore_store.v1.VectorStoreService.ListVectorStores:output_type -> llmoperator.vectore_store.v1.ListVectorStoresResponse
	1,  // 27: llmoperator.vectore_store.v1.VectorStoreService.GetVectorStore:output_type -> llmoperator.vectore_store.v1.VectorStore
	1,  // 28: llmoperator.vectore_store.v1.VectorStoreService.UpdateVectorStore:output_type -> llmoperator.vectore_store.v1.VectorStore
	11, // 29: llmoperator.vectore_store.v1.VectorStoreService.DeleteVectorStore:output_type -> llmoperator.vectore_store.v1.DeleteVectorStoreResponse
	12, // 30: llmoperator.vectore_store.v1.VectorStoreService.CreateVectorStoreFile:output_type -> llmoperator.vectore_store.v1.VectorStoreFile
	15, // 31: llmoperator.vectore_store.v1.VectorStoreService.ListVectorStoreFiles:output_type -> llmoperator.vectore_store.v1.ListVectorStoreFilesResponse
	12, // 32: llmoperator.vectore_store.v1.VectorStoreService.GetVectorStoreFile:output_type -> llmoperator.vectore_store.v1.VectorStoreFile
	18, // 33: llmoperator.vectore_store.v1.VectorStoreService.DeleteVectorStoreFile:output_type -> llmoperator.vectore_store.v1.DeleteVectorStoreFileResponse
	25, // [25:34] is the sub-list for method output_type
	16, // [16:25] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_v1_vector_store_proto_init() }
func file_api_v1_vector_store_proto_init() {
	if File_api_v1_vector_store_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_vector_store_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpiresAfter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoChunkingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticChunkingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherChunkingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVectorStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVectorStoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVectorStoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVectorStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVectorStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVectorStoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVectorStoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorStoreFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVectorStoreFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVectorStoreFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVectorStoreFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVectorStoreFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVectorStoreFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVectorStoreFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticChunkingStrategy_Static); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_vector_store_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorStoreFile_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_vector_store_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CreateVectorStoreRequest_AutoChunkingStrategy)(nil),
		(*CreateVectorStoreRequest_StaticChunkingStrategy)(nil),
	}
	file_api_v1_vector_store_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*VectorStoreFile_StaticChunkingStrategy)(nil),
		(*VectorStoreFile_OtherChunkingStrategy)(nil),
	}
	file_api_v1_vector_store_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CreateVectorStoreFileRequest_AutoChunkingStrategy)(nil),
		(*CreateVectorStoreFileRequest_StaticChunkingStrategy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_vector_store_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_vector_store_proto_goTypes,
		DependencyIndexes: file_api_v1_vector_store_proto_depIdxs,
		MessageInfos:      file_api_v1_vector_store_proto_msgTypes,
	}.Build()
	File_api_v1_vector_store_proto = out.File
	file_api_v1_vector_store_proto_rawDesc = nil
	file_api_v1_vector_store_proto_goTypes = nil
	file_api_v1_vector_store_proto_depIdxs = nil
}
